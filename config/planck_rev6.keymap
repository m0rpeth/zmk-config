/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// layer-tap

&lt {
    tapping-term-ms = <190>;
    flavor = "balanced";
};

// one-shot layers

&sl { release-after-ms = <5000>; };

/ {
    behaviors {
        mod_bspc: mod_bspc {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_BSPC";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            // -----------------------------------------------------------------------------------------
            // |  TAB  |  Q   |  W   |  E   |  R   |  T   |   Y   |  U    |  I   |  O   |   P   | BSPC  |
            // |  ESC  |  A   |  S   |  D   |  F   |  G   |   H   |  J    |  K   |  L   |   ;   |  '    |
            // | SHIFT |  Z   |  X   |  C   |  V   |  B   |   N   |  M    |  ,   |  .   |   /   |  RET  |
            // |       | LCTRL | LALT | LGUI | LOWR |     SPACE    |  RAIS | LEFT | DOWN | UP  |  RIGHT |

            bindings = <
&kp ESC    &kp Q  &kp W     &kp E     &kp R  &kp T      &kp Y      &kp U  &kp I      &kp O     &kp P     &mod_bspc
&kp TAB    &kp A  &kp S     &kp D     &kp F  &kp G      &kp H      &kp J  &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X     &kp C     &kp V  &kp B      &kp N      &kp M  &kp COMMA  &kp DOT   &kp FSLH  &kp RSHIFT
&kp LCTRL  &mo 5  &kp LALT  &kp LGUI  &mo 3  &kp SPACE  &kp SPACE  &mo 2  &kp ENTER  &kp RALT  &mo 6     &kp RCTRL
            >;
        };

        colemak {
            bindings = <
&trans  &kp Q  &kp W  &kp F   &kp P   &kp B     &kp J   &kp L   &kp U      &kp Y    &kp SEMI  &trans
&trans  &kp A  &kp R  &kp S   &kp T   &kp D     &kp H   &kp N   &kp E      &kp I    &kp O     &trans
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp K   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans   &trans    &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &kp LS(PRCNT)  &kp LS(PRCNT)  &kp LBKT      &kp RBKT      &kp GRAVE     &kp FSLH    &kp LS(CARET)  &kp LS(DLLR)  &kp LS(STAR)  &kp LS(POUND)  &trans
&trans  &kp LS(QMARK)  &kp LS(EXCL)   &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(PIPE)  &kp LS(AT)  &kp MINUS      &kp EQUAL     &kp LS(PLUS)  &kp LS(COLON)  &trans
&trans  &kp LS(AMPS)   &kp LS(UNDER)  &kp LS(LBRC)  &kp LS(RBRC)  &none         &kp BSLH    &kp LS(TILDE)  &kp LS(LT)    &kp LS(GT)    &kp LS(DQT)    &trans
&trans  &trans         &trans         &trans        &trans        &trans        &trans      &trans         &trans        &trans        &trans         &trans
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp COMMA  &kp N7  &kp N8  &kp N9  &kp LS(DLLR)   &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none   &trans
&trans  &kp N0     &kp N4  &kp N5  &kp N6  &kp LS(PRCNT)  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none   &trans
&trans  &kp DOT    &kp N1  &kp N2  &kp N3  &none          &none     &none      &none      &none      &none   &trans
&trans  &trans     &trans  &trans  &trans  &trans         &trans    &trans     &trans     &trans     &trans  &trans
            >;
        };

        adjust_layer {
            bindings = <
&tog 1  &none  &none  &none  &none  &none  &none  &none            &none            &none            &none            &bootloader
&none   &none  &none  &none  &none  &none  &none  &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI
&none   &none  &none  &none  &none  &none  &none  &none            &rgb_ug RGB_EFR  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD
&none   &none  &none  &none  &none  &none  &none  &none            &none            &none            &none            &none
            >;
        };

        Misc {
            bindings = <
&none   &none  &kp LC(LA(KP_NUMBER_7))  &kp LA(LC(KP_NUMBER_8))  &kp LC(LA(KP_NUMBER_9))   &none  &kp LC(NUMBER_1)    &kp LC(NUMBER_2)    &kp LC(NUMBER_3)  &kp LC(NUMBER_4)     &none  &none
&none   &none  &kp LA(LC(KP_NUMBER_4))  &kp LA(LC(KP_NUMBER_5))  &kp LA(LC(KP_NUMBER_6))   &none  &kp LC(LEFT_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(UP_ARROW)  &kp LC(RIGHT_ARROW)  &none  &none
&none   &none  &kp LC(LA(KP_NUMBER_1))  &kp LA(LC(KP_NUMBER_2))  &kp LA(LC(KP_NUMBER_3))   &none  &none              &none              &none            &none               &none  &none
&trans  &trans                   &trans                   &trans                   &trans  &trans  &trans              &trans              &trans            &trans               &trans  &trans
            >;
        };

        fn_layer {
            bindings = <
&none   &none   &none   &none   &none   &none   &none   &none   &none   &none    &none    &none
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&none   &none   &none   &none   &none   &none   &none   &none   &none   &none    &none    &none
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans   &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        activate_adjust_layer {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
