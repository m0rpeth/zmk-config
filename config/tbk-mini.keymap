/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// layer-tap
&lt {
  tapping-term-ms = <190>;
  flavor = "balanced"
};

// one-shot layers
&sl {
    release-after-ms = <5000>;
};

/ {

    //combos {
    //    compatible = "zmk,combos";
    //    combo_esc {
    //        timeout-ms = <50>;
    //        key-positions = <0 1>;
    //        bindings = <&kp ESC>;
    //    };
    //};

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E            &kp R  &kp T            &kp Y      &kp U  &kp I           &kp O    &kp P     &kp BSPC
&kp TAB     &kp A  &kp S  &kp D            &kp F  &kp G            &kp H      &kp J  &kp K           &kp L    &kp SEMI  &kp SQT
&kp LSHFT   &kp Z  &kp X  &kp C            &kp V  &kp B            &kp N      &kp M  &kp COMMA       &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                          &mt LGUI ESCAPE  &mo 2  &kp BACKSPACE    &kp SPACE  &mo 1  &mt RGUI ENTER
            >;
        };

        raise_layer {
            bindings = <
&trans  &kp LS(PRCNT)  &kp LS(PRCNT)  &kp LBKT      &kp RBKT      &kp GRAVE       &kp FSLH    &kp LS(CARET)  &kp LS(DLLR)  &kp LS(STAR)  &kp LS(POUND)  &none
&trans  &kp LS(QMARK)  &kp LS(EXCL)   &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(PIPE)    &kp LS(AT)  &kp MINUS      &kp EQUAL     &kp LS(PLUS)  &kp LS(COLON)  &trans
&trans  &kp LS(AMPS)   &kp LS(UNDER)  &kp LS(LBRC)  &kp LS(RBRC)  &none           &kp BSLH    &kp LS(TILDE)  &kp LS(LT)    &kp LS(GT)    &kp LS(DQT)    &trans
                                      &trans        &trans        &trans          &trans      &trans         &trans
            >;
        };

        lower_layer {
            bindings = <
&kp COMMA  &kp N7  &kp N8  &kp N9  &kp LS(DLLR)   &trans    &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans  &trans
&kp N0     &kp N4  &kp N5  &kp N6  &kp LS(PRCNT)  &trans    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans  &trans
&kp DOT    &kp N1  &kp N2  &kp N3  &none          &trans    &trans    &trans     &trans     &trans     &trans  &trans
                           &trans  &trans         &trans    &trans    &trans     &trans
            >;
        };
    };
};
