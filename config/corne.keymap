#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// layer-tap
// one-shot layers

/ {
    //combos {
    //    compatible = "zmk,combos";
    //    combo_esc {
    //        timeout-ms = <50>;
    //        key-positions = <0 1>;
    //        bindings = <&kp ESC>;
    //    };
    //};

    behaviors {
        mod_bspc: mod_bspc {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_BSPC";
            bindings = <&kp BACKSPACE>, <&kp DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <36 37 38 39 40 30 18 6 7 19 31 32 20 8 9 21 34 33 22 10 11 35 23 41>;
            hold-trigger-on-release;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-on-release;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
        };

        fn_win_layer_tap_dance: fn_win_layer_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "FN_WIN_LAYER_TAP_DANCE";
            #binding-cells = <0>;
            bindings = <&mo 5>, <&mo 6>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Left_Square_Bracket {
            bindings = <&kp LBKT>;
            key-positions = <2 3>;
        };

        Right_Square_Bracket {
            bindings = <&kp RBKT>;
            key-positions = <3 4>;
            layers = <0>;
        };

        Left_Parenthesis {
            bindings = <&kp LPAR>;
            key-positions = <14 15>;
            layers = <0>;
        };

        Right_Parenthesis {
            bindings = <&kp RPAR>;
            key-positions = <15 16>;
            layers = <0>;
        };

        Left_Brace {
            bindings = <&kp LBRC>;
            key-positions = <26 27>;
            layers = <0>;
        };

        Right_Brace {
            bindings = <&kp RBRC>;
            key-positions = <27 28>;
            layers = <0>;
        };

        Percent {
            bindings = <&kp PERCENT>;
            key-positions = <8 9>;
            layers = <0>;
        };

        QuestionMark {
            bindings = <&kp QMARK>;
            key-positions = <13 14>;
            layers = <0>;
        };

        ExclamationMark {
            bindings = <&kp EXCL>;
            key-positions = <25 26>;
            layers = <0>;
        };

        Underscore {
            bindings = <&kp UNDER>;
            key-positions = <28 29>;
            layers = <0>;
        };

        Amp {
            bindings = <&kp AMPS>;
            key-positions = <1 2>;
            layers = <0>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <4 5>;
            layers = <0>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <16 17>;
            layers = <0>;
        };

        At {
            bindings = <&kp AT>;
            key-positions = <18 19>;
            layers = <0>;
        };

        Backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <34 31>;
            layers = <0>;
        };

        Caret {
            bindings = <&kp CARET>;
            key-positions = <7 6>;
            layers = <0>;
        };

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <19 20>;
            layers = <0>;
        };

        Tilde {
            bindings = <&kp TILDE>;
            key-positions = <7 10>;
            layers = <0>;
        };

        Dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <30 31>;
            layers = <0>;
        };

        Equal {
            bindings = <&kp EQUAL>;
            key-positions = <20 21>;
            layers = <0>;
        };

        lt {
            bindings = <&kp LESS_THAN>;
            key-positions = <32 33>;
            layers = <0>;
        };

        gt {
            bindings = <&kp GREATER_THAN>;
            key-positions = <33 34>;
            layers = <0>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <21 22>;
            layers = <0>;
        };

        Asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <9 10>;
            layers = <0>;
        };

        Hash {
            bindings = <&kp HASH>;
            key-positions = <31 32>;
            layers = <0>;
        };

        dbl-quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <23 22>;
            layers = <0>;
        };
    };

    macros {
        px: px {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp X>;
            label = "PX";
        };

        rem: rem {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp E &kp M>;
            label = "REM";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            display-name = "qwerty";
            bindings = <
&kp ESCAPE  &kp Q              &kp W              &kp E           &kp R                &kp T        &kp Y      &kp U           &kp I           &kp O               &kp P             &mod_bspc
&kp TAB     &hrm_l LEFT_GUI A  &hrm_l LEFT_ALT S  &hrm_l LCTRL D  &hrm_l LEFT_SHIFT F  &kp G        &kp H      &hrm_r RSHFT J  &hrm_r RCTRL K  &hrm_r RIGHT_ALT L  &hrm_r RGUI SEMI  &kp SQT
&mo 6       &kp Z              &kp X              &kp C           &kp V                &kp B        &kp N      &kp M           &kp COMMA       &kp DOT             &kp FSLH          &mo 5
                                                  &kp ESCAPE      &mo 4                &mod_bspc    &kp SPACE  &mo 3           &kp ENTER
            >;
        };

        colemak {
            display-name = "colemak";
            bindings = <
&trans  &kp Q  &kp W  &kp F   &kp P   &kp G     &kp J   &kp L   &kp U      &kp Y    &kp SEMI  &trans
&trans  &kp A  &kp R  &kp S   &kp T   &kp D     &kp H   &kp N   &kp E      &kp I    &kp O     &trans
&trans  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp K   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Gaming_Hunt {
            display-name = "Hunt";
            bindings = <
&tog 3   &kp ESC    &kp Q  &kp W   &kp E   &kp R     &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB  &kp LSHFT  &kp A  &kp S   &kp D   &kp F     &trans  &trans  &trans  &trans  &trans  &trans
&none    &kp LCTRL  &kp Z  &kp X   &kp C   &kp V     &trans  &trans  &trans  &trans  &trans  &trans
                           &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        raise_layer {
            display-name = "rse";
            bindings = <
&trans  &kp LS(PRCNT)  &kp LS(PRCNT)  &kp LBKT      &kp RBKT      &kp GRAVE       &kp FSLH    &kp LS(CARET)  &kp LS(DLLR)  &kp LS(STAR)  &kp LS(POUND)  &trans
&trans  &kp LS(QMARK)  &kp LS(EXCL)   &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(PIPE)    &kp LS(AT)  &kp MINUS      &kp EQUAL     &kp LS(PLUS)  &kp LS(COLON)  &none
&trans  &kp LS(AMPS)   &kp LS(UNDER)  &kp LS(LBRC)  &kp LS(RBRC)  &none           &kp BSLH    &kp LS(TILDE)  &kp LS(LT)    &kp LS(GT)    &kp LS(DQT)    &trans
                                      &trans        &trans        &trans          &trans      &trans         &trans
            >;
        };

        lower_layer {
            display-name = "lwr";
            bindings = <
&trans  &kp COMMA  &kp N7  &kp N8  &kp N9  &rem             &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none  &trans
&trans  &kp N0     &kp N4  &kp N5  &kp N6  &kp LS(PRCNT)    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none  &none
&trans  &kp DOT    &kp N1  &kp N2  &kp N3  &px              &none     &none      &none      &none      &none  &trans
                           &trans  &trans  &trans           &trans    &trans     &trans
            >;
        };

        adjust_layer {
            display-name = "adj";
            bindings = <
&tog 1  &tog 3  &none  &none   &none   &none     &bt BT_CLR_ALL  &none         &none         &none         &none         &none
&none   &none   &none  &none   &none   &none     &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&none   &none   &none  &none   &none   &none     &none           &none         &none         &none         &none         &none
                       &trans  &trans  &trans    &trans          &trans        &trans
            >;
        };

        fn_layer {
            display-name = "fn";
            bindings = <
&none   &none   &none   &none   &none   &none     &none   &none   &none   &none    &none    &none
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&none   &none   &none   &none   &none   &none     &none   &none   &none   &none    &none    &none
                        &none   &none   &none     &none   &none   &none
            >;
        };

        wm_layer {
            display-name = "wm";
            bindings = <
&none  &none  &kp LC(LA(KP_NUMBER_7))  &kp LA(LC(KP_NUMBER_8))  &kp LC(LA(KP_NUMBER_9))  &none     &kp LC(NUMBER_1)    &kp LC(NUMBER_2)    &kp LC(NUMBER_3)  &kp LC(NUMBER_4)     &none  &none
&none  &none  &kp LA(LC(KP_NUMBER_4))  &kp LA(LC(KP_NUMBER_5))  &kp LA(LC(KP_NUMBER_6))  &none     &kp LC(LEFT_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(UP_ARROW)  &kp LC(RIGHT_ARROW)  &none  &none
&none  &none  &kp LC(LA(KP_NUMBER_1))  &kp LA(LC(KP_NUMBER_2))  &kp LA(LC(KP_NUMBER_3))  &none     &none               &none               &none             &none                &none  &none
                                       &trans                   &trans                   &trans    &trans              &trans              &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        activate_adjust_layer {
            if-layers = <4 3>;
            then-layer = <5>;
        };
    };
};
